
#user  nobody;
worker_processes  auto;

error_log  logs/error.log;
# debug info notice warn error crit, default: error.
error_log logs/error.log warn;

pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$host $remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent $request_length "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    init_by_lua_block {
        local conf_path = ngx.config.prefix()
        -- 注入lua-resty-core的ngx.process API
        local process = require "ngx.process"
        local ngx_log = ngx.log
        local ngx_ERR = ngx.ERR

        -- require模块时的模块查找路径
        package.path = conf_path .. "/app/?.lua;"  -- 应用自身的lua模块
                       .. conf_path .. "/lib/?.lua;"  -- 自定义lua库
                       .. conf_path .. "/tplib/?.lua;"  -- 第三方lua库
                       .. package.path  -- openresty官方lua库

        main = require "main"

        -- 开启特权进程
        local ok, err = process.enable_privileged_agent()
        if not ok then
            ngx_log(ngx_ERR, "enable privileged agent failed:", err)
        end
    }

    # 实现*.conf文件或*.lua文件有变化时进行热更新(live reload)
    init_worker_by_lua_block {
        local process = require "ngx.process"
        local resty_shell = require "resty.shell"
        local ngx_prefix = ngx.config.prefix()
        local ngx_timer = ngx.timer
        local ngx_log = ngx.log
        local ngx_ERR = ngx.ERR
        local ngx_WARN = ngx.WARN
        local files_md5sum_old = ""

        local function get_files_md5sum()
            local ok, stdout, stderr, reason, status = resty_shell.run([[find ]]
                .. ngx_prefix
                .. [[ -type f -name "*.lua" -o -name "*.conf" | xargs cat | md5sum | cut -d" " -f1]])
            if not ok then
                ngx_log(ngx_ERR,
                    "get files md5sum failed, stderr: ", stderr,
                    "reason: ", reason,
                    "status: ", status)
                return
            end

            return stdout
        end

        local function reload()
            local f, err = io.open(ngx_prefix .. "/logs/nginx.pid", "r")
            if not f then
                ngx_log(ngx_ERR, err)
                return
            end
            local pid = f:read()
            f:close()

            os.execute("kill -HUP " .. pid)

            ngx_log(ngx_WARN, "files changed, and openresty reloaded")
        end

        local function live_reload(premature)
            if files_md5sum_old == "" then
                files_md5sum_old = get_files_md5sum()
                return
            end

            local files_md5sum_now = get_files_md5sum()
            if files_md5sum_now ~= files_md5sum_old then
                reload()
                files_md5sum_old = files_md5sum_now
            end
        end

        if process.type() == "privileged agent" then
            local ok, err = ngx_timer.every(3, live_reload)
            if not ok then
                ngx_log(ngx_ERR, err)
            end
        end
    }

    # 对用户的并发访问数进行限制
    lua_shared_dict my_limit_req_store 100m;

    # 对响应给用户的数据进行缓存
    lua_shared_dict resp_cache 200m;

    # 对从后端返回的碎片数据的缓存
    lua_shared_dict common_cache 100m;

    # worker之间进行通信需要的共享内存
    lua_shared_dict ipc_shm 50m;


    server {
        listen       80;
        #listen       443 ssl http2;
        #server_name  bar.foo.com;

        #ssl_certificate      ssl/wildcard.foo.com.cer;
        #ssl_certificate_key  ssl/wildcard.foo.com.key;

        #ssl_session_cache    shared:SSL:1m;
        #ssl_session_timeout  5m;

        #ssl_ciphers  HIGH:!aNULL:!MD5;
        #ssl_prefer_server_ciphers  on;

        #charset koi8-r;

        access_log  logs/access.log  main;
        # 错误级别设置为notice用于调试阶段, 上线后可注释.
        error_log  logs/error.log  notice;

        # 访问根路径, 默认响应欢迎信息, 并提供OpenResty相关的文档地址供参考
        location = / {
            default_type text/html;

            content_by_lua_block {
                ngx.say([[<h2>Welcome to OpenResty!</h2>
                    <a href="https://github.com/openresty/lua-nginx-module#nginx-api-for-lua"
                        target=_blank>Nginx API for Lua</a><br>
                    <a href="https://github.com/openresty/lua-resty-core"
                        target=_blank>New FFI-based Lua API</a><br>
                    <a href="https://groups.google.com/g/openresty"
                        target=_blank>OpenResty Google Groups</a><br>
                    <a href="https://openresty.gitbooks.io/programming-openresty/content/"
                        target=_blank>Programming OpenResty</a><br>
                    <a href="https://github.com/bungle/awesome-resty"
                        target=_blank>Awesome OpenResty</a><br>
                    <a href="https://opm.openresty.org/"
                        target=_blank>OpenResty Package Manager</a><br>
                    <a href="https://luarocks.org/"
                        target=_blank>LuaRocks - Package Manager for Lua Modules</a><br>
                    <a href="https://moonbingbing.gitbooks.io/openresty-best-practices/content/index.html"
                        target=_blank>OpenResty Best Practices</a><br>
                    <a href="http://nginx.org/en/docs/"
                        target=_blank>Nginx Documentation</a>
                ]])
            }
        }

        # 静态文件的路由单独指定
        location /static/ {
            root html;
        }

        # 状态信息接口
        location = /basic_status {
            stub_status;
        }

        # 项目的业务API路由入口
        location / {
            default_type application/json;

            # 用户上传数据大小限制.
            client_max_body_size 1m;
            client_body_buffer_size 1m;

            # 匹配uri(不包括url参数)结尾带/的请求
            if ($uri ~ /$) {
                # 301重定向, 让用户重新请求uri结尾去掉/的url
                rewrite ^(.*)/(.*)$ $1$2 permanent;
            }

            rewrite_by_lua_block {
                main.rewrite()
            }

            access_by_lua_block {
                main.access()
            }

            content_by_lua_block {
                main.content()
            }
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        #error_page   500 502 503 504  /50x.html;
        #location = /50x.html {
            #root   html;
        #}
    }
}

