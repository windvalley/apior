
#user  nobody;
worker_processes  auto;

error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  10240;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$host $remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent $request_length "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;


    init_by_lua_block {
        local conf_path = ngx.config.prefix()
        -- require模块时的模块查找路径
        package.path = conf_path .. "/app/?.lua;"  -- 应用自身的lua模块
                       .. conf_path .. "/lib/?.lua;"  -- 自定义lua库
                       .. conf_path .. "/tplib/?.lua;"  -- 第三方lua库
                       .. package.path  -- openresty官方lua库

        main = require "main"
    }

    # 对用户的并发访问数进行限制
    lua_shared_dict my_limit_req_store 100m;

    # 对响应给用户的数据进行缓存
    lua_shared_dict resp_cache 200m;

    # 对从后端返回的碎片数据的缓存
    lua_shared_dict common_cache 100m;

    # worker之间进行通信需要的共享内存
    lua_shared_dict ipc_shm 50m;


    server {
        listen       8361;
        listen       8443 ssl http2;
        server_name  back.ssl.qihucdn.com;

        ssl_certificate      ssl/wildcard.ssl.qihucdn.com.cer;
        ssl_certificate_key  ssl/wildcard.ssl.qihucdn.com.key;

        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;

        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;

        #charset koi8-r;

        access_log  logs/access.log  main;
        error_log  logs/error.log  notice;


        location / {
            default_type application/json;

            rewrite_by_lua_block {
                main.rewrite()
            }

            access_by_lua_block {
                main.access()
            }

            content_by_lua_block {
                main.content()
            }
        }

        # 静态文件的路由单独指定
        location /static/ {
            root html;
        }

        location = /basic_status {
            stub_status;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}

